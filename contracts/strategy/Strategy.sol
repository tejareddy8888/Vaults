// SPDX-License-Identifier: AGPL-3.0
// Feel free to change the license, but this is what we use

// Feel free to change this version of Solidity. We support >=0.6.0 <0.7.0;
pragma solidity 0.6.12;
pragma experimental ABIEncoderV2;

// These are the core Yearn libraries
import {
    BaseStrategy,
    StrategyParams
} from "../BaseStrategy.sol";

import {ConvexStable} from "./ConvexStable.sol";
import {Rewards} from "../interfaces/Rewards.sol";
import {Booster} from "../interfaces/Booster.sol";
import {Uni} from "../interfaces/Uniswap.sol";
import {ICurveFi} from "../interfaces/ICurveFi.sol";

import {
    SafeERC20,
    SafeMath,
    IERC20,
    Address
} from "@openzeppelin/contracts/token/ERC20/SafeERC20.sol";

import {
    Math
} from "@openzeppelin/contracts/math/MATH.sol";

// Import interfaces for many popular DeFi projects, or add your own!
//import "../interfaces/<protocol>/<Interface>.sol";

// contract Strategy is BaseStrategy {
//     using SafeERC20 for IERC20;
//     using Address for address;
//     using SafeMath for uint256;

//     constructor(address _vault) public BaseStrategy(_vault) {
//         // You can set these parameters on deployment to whatever you want
//         // maxReportDelay = 6300;
//         // profitFactor = 100;
//         // debtThreshold = 0;
//     }

//     // ******** OVERRIDE THESE METHODS FROM BASE CONTRACT ************

//     function name() external view override returns (string memory) {
//         // Add your own name here, suggestion e.g. "StrategyCreamYFI"
//         return "Strategy<Sygnum><Stable>";
//     }

//     function estimatedTotalAssets() public view override returns (uint256) {
//         // TODO: Build a more accurate estimate using the value of all positions in terms of `want`
//         return want.balanceOf(address(this));
//     }

//     function prepareReturn(uint256 _debtOutstanding)
//         internal
//         override
//         returns (
//             uint256 _profit,
//             uint256 _loss,
//             uint256 _debtPayment
//         )
//     {
//         // TODO: Do stuff here to free up any returns back into `want`
//         // NOTE: Return `_profit` which is value generated by all positions, priced in `want`
//         // NOTE: Should try to free up at least `_debtOutstanding` of underlying position
//     }

//     function adjustPosition(uint256 _debtOutstanding) internal override {
//         // TODO: Do something to invest excess `want` tokens (from the Vault) into your positions
//         // NOTE: Try to adjust positions so that `_debtOutstanding` can be freed up on *next* harvest (not immediately)
//     }

//     function liquidatePosition(uint256 _amountNeeded)
//         internal
//         override
//         returns (uint256 _liquidatedAmount, uint256 _loss)
//     {
//         // TODO: Do stuff here to free up to `_amountNeeded` from all positions back into `want`
//         // NOTE: Maintain invariant `want.balanceOf(this) >= _liquidatedAmount`
//         // NOTE: Maintain invariant `_liquidatedAmount + _loss <= _amountNeeded`

//         uint256 totalAssets = want.balanceOf(address(this));
//         if (_amountNeeded > totalAssets) {
//             _liquidatedAmount = totalAssets;
//             _loss = _amountNeeded.sub(totalAssets);
//         } else {
//             _liquidatedAmount = _amountNeeded;
//         }
//     }

//     function liquidateAllPositions() internal override returns (uint256) {
//         // TODO: Liquidate all positions and return the amount freed.
//         return want.balanceOf(address(this));
//     }

//     // NOTE: Can override `tendTrigger` and `harvestTrigger` if necessary

//     function prepareMigration(address _newStrategy) internal override {
//         // TODO: Transfer any non-`want` tokens to the new strategy
//         // NOTE: `migrate` will automatically forward all `want` in this strategy to the new one
//     }

//     // Override this to add all tokens/tokenized positions this contract manages
//     // on a *persistent* basis (e.g. not just for swapping back to want ephemerally)
//     // NOTE: Do *not* include `want`, already included in `sweep` below
//     //
//     // Example:
//     //
//     //    function protectedTokens() internal override view returns (address[] memory) {
//     //      address[] memory protected = new address[](3);
//     //      protected[0] = tokenA;
//     //      protected[1] = tokenB;
//     //      protected[2] = tokenC;
//     //      return protected;
//     //    }
//     function protectedTokens()
//         internal
//         view
//         override
//         returns (address[] memory)
//     {}

//     /**
//      * @notice
//      *  Provide an accurate conversion from `_amtInWei` (denominated in wei)
//      *  to `want` (using the native decimal characteristics of `want`).
//      * @dev
//      *  Care must be taken when working with decimals to assure that the conversion
//      *  is compatible. As an example:
//      *
//      *      given 1e17 wei (0.1 ETH) as input, and want is USDC (6 decimals),
//      *      with USDC/ETH = 1800, this should give back 1800000000 (180 USDC)
//      *
//      * @param _amtInWei The amount (in wei/1e-18 ETH) to convert to `want`
//      * @return The amount in `want` of `_amtInEth` converted to `want`
//      **/
//     function ethToWant(uint256 _amtInWei)
//         public
//         view
//         virtual
//         override
//         returns (uint256)
//     {
//         // TODO create an accurate price oracle
//         return _amtInWei;
//     }
// }



contract Strategy is ConvexStable {
    address[] public pathTarget;

    constructor(address _vault) public ConvexStable(_vault) {
        curve = address(0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7);
        id = 9;
        isClaimRewards = true; // default is true, turn off in emergency
        // isClaimExtras = true; // add this if there are extra rewards

        (address _lp,,,address _reward,,) = Booster(booster).poolInfo(id);
        require(_lp == address(want), "constructor: incorrect lp token");
        rewardContract = _reward;

        _approveBasic();
        pathTarget = new address[](2);
        _setPathTarget(0, 0); // crv path target
        _setPathTarget(1, 0); // cvx path target

        dex = new address[](2);
        dex[0] = sushiswap; // crv
        dex[1] = sushiswap; // cvx
        _approveDex();
    }

    // >>> approve other rewards on dex
    // function _approveDex() internal override { super._approveDex(); }

    // >>> include other rewards
    // function _migrateRewards(address _newStrategy) internal override { super._migrateRewards(_newStrategy); }

    // >>> include all other rewards in eth besides _claimableBasicInETH()
    // function _claimableInETH() internal override view returns (uint256 _claimable) { _claimable = super._claimableInETH(); }

    function _setPathTarget(uint _tokenId, uint _id) internal {
        if (_id == 0) { 
            pathTarget[_tokenId] = dai;
        }
        else if (_id == 1) {
            pathTarget[_tokenId] = usdc;
        }
        else {
            pathTarget[_tokenId] = usdt;
        }
    }

    function setPathTarget(uint _tokenId, uint _id) external onlyAuthorized {
        _setPathTarget(_tokenId, _id);
    }

    function prepareReturn(uint256 _debtOutstanding)
        internal
        override
        returns (
            uint256 _profit,
            uint256 _loss,
            uint256 _debtPayment
        )
    {
        uint before = balanceOfWant();
        Rewards(rewardContract).getReward(address(this), isClaimExtras);
        uint256 _crv = IERC20(crv).balanceOf(address(this));
        if (_crv > 0) {
            _crv = _adjustCRV(_crv);

            address[] memory path = new address[](3);
            path[0] = crv;
            path[1] = weth;
            path[2] = pathTarget[0];

            Uni(dex[0]).swapExactTokensForTokens(_crv, uint256(0), path, address(this), now);
        }
        uint256 _cvx = IERC20(cvx).balanceOf(address(this));
        if (_cvx > 0) {
            address[] memory path = new address[](3);
            path[0] = cvx;
            path[1] = weth;
            path[2] = pathTarget[1];

            Uni(dex[1]).swapExactTokensForTokens(_cvx, uint256(0), path, address(this), now);
        }
        uint256 _dai = IERC20(dai).balanceOf(address(this));
        uint256 _usdc = IERC20(usdc).balanceOf(address(this));
        uint256 _usdt = IERC20(usdt).balanceOf(address(this));
        if (_dai > 0 || _usdc > 0 || _usdt > 0) {
            ICurveFi(curve).add_liquidity([_dai, _usdc, _usdt], 0);
        }
        _profit = want.balanceOf(address(this)).sub(before);

        uint _total = estimatedTotalAssets();
        uint _debt = vault.strategies(address(this)).totalDebt;
        if(_total < _debt) {
            _loss = _debt - _total;
            _profit = 0;
        }

        if (_debtOutstanding > 0) {
            _withdrawSome(_debtOutstanding);
            _debtPayment = Math.min(_debtOutstanding, balanceOfWant().sub(_profit));
        }
    }

    function protectedTokens()
        internal
        view
        override
        returns (address[] memory)
    {
        address[] memory protected = new address[](2);
        protected[0] = crv;
        protected[1] = cvx;
        return protected;
    }

    function liquidateAllPositions() internal override returns (uint256) {
        // TODO: Liquidate all positions and return the amount freed.
        return want.balanceOf(address(this));
    }

    /**
     * @notice
     *  Provide an accurate conversion from `_amtInWei` (denominated in wei)
     *  to `want` (using the native decimal characteristics of `want`).
     * @dev
     *  Care must be taken when working with decimals to assure that the conversion
     *  is compatible. As an example:
     *
     *      given 1e17 wei (0.1 ETH) as input, and want is USDC (6 decimals),
     *      with USDC/ETH = 1800, this should give back 1800000000 (180 USDC)
     *
     * @param _amtInWei The amount (in wei/1e-18 ETH) to convert to `want`
     * @return The amount in `want` of `_amtInEth` converted to `want`
     **/
    function ethToWant(uint256 _amtInWei)
        public
        view
        virtual
        override
        returns (uint256)
    {
        // TODO create an accurate price oracle
        return _amtInWei;
    }
}